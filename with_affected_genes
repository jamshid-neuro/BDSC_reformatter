import pandas as pd
    
    
data1 = pd.read_excel (r'//Users/jamshidasadzadeh/Desktop/Python/bloomington_stocks/bloomington_stock_list.xlsm') 

stocklist = pd.DataFrame(data1, columns= ['stk_num','Genotype', 'ch_num_all', 'Stock comments'])

stck_numlist = stocklist['stk_num'].tolist()

genolist = stocklist['Genotype'].tolist()

chr_num = stocklist['ch_num_all'].tolist()

stck_comments = stocklist['Stock comments'].tolist()




data2 = pd.read_excel (r'//Users/jamshidasadzadeh/Desktop/Python/bloomington_stocks/stockgenes.xlsx') 

stockgenes = pd.DataFrame(data2, columns= ['stknum','gene_symbol', 'fbgn'])

stck_numlist2 = stockgenes['stknum'].tolist()

gene_symb_list = stockgenes['gene_symbol'].tolist()

fbgn_list = stockgenes['fbgn'].tolist()



def bloom_lib():

########## To make a library of {stock numbers : genotypes}

    stknum_geno_lib = {}
    
    for n in range(0, len(stck_numlist)):
        stknum_geno_lib[stck_numlist[n]] = genolist[n]
  
    
########## To make a library of {stock numbers : affected chromosomes}  
    
    stck_num_chrmsm = {}
       
    for m in range(0, len(stck_numlist)):
        stck_num_chrmsm[stck_numlist[m]] = chr_num[m]
    
    
    
    ## Final doctionary called all_data with all the data to be exported as a final Excel sheet   
    all_data = {}
    
    ## Columns on the all_data sheet
    stck_code = []
    ref_genotype = []
    affected_genes = []
    comments = []
    
########## To make a library of {stock numbers : comments}      
    stck_num_comments = {}
    
    for b in range(0, len(stck_numlist)):
        stck_num_comments[stck_numlist[b]] = stck_comments[b]
        comments.append(stck_comments[b])
        
        
########### To make a library of {stock numbers : afected genes}  

    from collections import defaultdict
    
    stcknum_genesymb_lib = defaultdict(list)
    
    for i,j in enumerate(stck_numlist2):
  
        stcknum_genesymb_lib[j].append(gene_symb_list[i])
    
    
        
#######################
    reformatted_genotypes = {}
 
    
    for x in stck_numlist:
        
        stock_number = x

        sorted_raw = str(stknum_geno_lib[stock_number])

        sorted_raw_lst = list(sorted_raw)

        for p, q in enumerate(sorted_raw_lst):

            if q == ';' and sorted_raw_lst[p+2] ==')':
                sorted_raw_lst[p] = ':'
            elif q == ';' and sorted_raw_lst[p-2] =='(':
                sorted_raw_lst[p] = ':'


        sorted_raw2 = ''.join(sorted_raw_lst)
        
        sp_sorted_raw = sorted_raw2.split(';')
        #return type(sp_sorted_raw)
        #print('\nBloomington genotype:\n\n' + '             ', sorted_raw)

        #exceptions = []

        #if len(sp_sorted_raw) != len(stck_num_chrmsm[stock_number]):
        try: 
            frst = ''
            scnd = ''
            thrd = ''
            frth = ''

            if 'wt' in str(stck_num_chrmsm[stock_number]):

                
                
                frst += str(stknum_geno_lib[x]) + ':' + '     ' 

                scnd = ''

                thrd = ''

                frth += ' ' + '   "Wild-type line"'


        
            
            if '4' in str(stck_num_chrmsm[stock_number]) and '3' in str(stck_num_chrmsm[stock_number]) and '2' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]):

                frst += sp_sorted_raw[0]
                scnd += sp_sorted_raw[1]
                thrd += sp_sorted_raw[2]
                frth += sp_sorted_raw[3]


            elif '4' in str(stck_num_chrmsm[stock_number]) and '3' in str(stck_num_chrmsm[stock_number]) and '2' in str(stck_num_chrmsm[stock_number]) and scnd == '' and thrd == '' and frth == '':
                scnd += sp_sorted_raw[0]
                thrd += sp_sorted_raw[1]
                frth += sp_sorted_raw[2]

            elif '4' in str(stck_num_chrmsm[stock_number]) and '3' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]) and frst == '' and thrd == '' and frth == '':
                frst += sp_sorted_raw[0]
                thrd += sp_sorted_raw[1]
                frth += sp_sorted_raw[2] 

            elif '4' in str(stck_num_chrmsm[stock_number]) and '3' in str(stck_num_chrmsm[stock_number]) and thrd == '' and frth == '':
                thrd += sp_sorted_raw[0]
                frth += sp_sorted_raw[1]
        ######
            elif '4' in str(stck_num_chrmsm[stock_number]) and '2' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]) and frth == '' and scnd == '' and frst == '':
                frst += sp_sorted_raw[0]
                scnd += sp_sorted_raw[1]
                frth += sp_sorted_raw[2]


            elif '4' in str(stck_num_chrmsm[stock_number]) and '2' in str(stck_num_chrmsm[stock_number]) and frth == '' and scnd == '':
                scnd += sp_sorted_raw[0]
                frth += sp_sorted_raw[1]

            elif '4' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]) and frth == '' and frst == '':
                frst += sp_sorted_raw[0]
                frth += sp_sorted_raw[1]

            elif '4' in str(stck_num_chrmsm[stock_number]) and frth == '':
                frth += sp_sorted_raw[0]  


            if '3' in str(stck_num_chrmsm[stock_number]) and '2' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]) and frst == '' and scnd == '' and thrd == '':
                frst += sp_sorted_raw[0] 
                scnd += sp_sorted_raw[1]
                thrd += sp_sorted_raw[2]


            elif '3' in str(stck_num_chrmsm[stock_number]) and '2' in str(stck_num_chrmsm[stock_number]) and thrd == '' and scnd == '':
                scnd += sp_sorted_raw[0]
                thrd += sp_sorted_raw[1]

            elif '3' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]) and thrd == '' and frst == '':
                frst += sp_sorted_raw[0]
                thrd += sp_sorted_raw[1]

            elif '3' in str(stck_num_chrmsm[stock_number]) and thrd == '':
                thrd += sp_sorted_raw[0]


            if '2' in str(stck_num_chrmsm[stock_number]) and '1' in str(stck_num_chrmsm[stock_number]) and scnd == '' and frst == '':
                frst += sp_sorted_raw[0] 
                scnd += sp_sorted_raw[1]

            elif '2' in str(stck_num_chrmsm[stock_number]) and scnd == '':
                scnd += sp_sorted_raw[0]

            if '1' in str(stck_num_chrmsm[stock_number]) and frst == '':
                frst += sp_sorted_raw[0]

            if frst == '':
                frst = ' '
            if scnd == '':
                scnd = ' '
            if thrd == '':
                thrd = ' '
            if frth == '':
                frth = ' '

            genotype = [frst, scnd, thrd, frth]

            #print('\n\n\n\n\n\nReformatted genotype: \n\n\n             {} ; {} ; {} ; {}'.format(genotype[0], genotype[1], genotype[2], genotype[3]))
            #print('\n\n1st Chr: {}\n'.format(frst))
            #print('\n2nd Chr: {}\n'.format(scnd))
            #print('\n3rd Chr: {}\n'.format(thrd))
            #print('\n4th Chr: {}\n'.format(frth))
            #print("\n\nComments: *** "+ str(stck_num_comments[stock_number]), '***')

            reformatted_genotypes[x] = frst+'  ;  '+scnd+'  ;  '+thrd+'  ;  '+frth
           
            stck_code.append(str(x))
            ref_genotype.append(reformatted_genotypes[x])
            affected_genes.append(stcknum_genesymb_lib[x])
            
            
            sorted_raw = ''
            sorted_raw_lst = []
            sorted_raw2 = ''
            sp_sorted_raw = []
            
           
            

        except:
                
            reformatted_genotypes[x] = 'NOT ReFORMATTED!!! Original BDSC genotype:  ' + sorted_raw
            
            stck_code.append(str(x))
            ref_genotype.append(reformatted_genotypes[x])
            affected_genes.append(stcknum_genesymb_lib[x])
            
            sorted_raw = ''
            sorted_raw_lst = []
            sorted_raw2 = ''
            sp_sorted_raw = []
            
            
            

    
    all_data['Stock Number'] = stck_code[:-1]
    all_data['Reformatted Genotype'] = ref_genotype[:-1]
    all_data['Affected Genes'] = affected_genes[:-1]
    all_data['Comments'] = comments[:-1]   
    
    
    export = pd.DataFrame(all_data, columns = ['Stock Number', 'Reformatted Genotype', 'Affected Genes', 'Comments'])
    export.to_excel (r'//Users/jamshidasadzadeh/Desktop/Python/bloomington_stocks/export_dataframe.xlsx', index = False, header=True)
